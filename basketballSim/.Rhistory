game.value <- function(s1,s2,c1=200,c2=50) {
top <- s1-s2
bot <- sqrt(c1 *sqrt((s1+s2)/c2))
return(pmin(pmax(.05,pnorm(top/bot)),.985))
}
predict <- function(eloA, eloB)
{
return (1/(1+10^((eloB-eloA)/400)))
}
log.likelihood <- function(x, oppElo, game.value, deviation)
{
return((dnorm(predict(x, oppElo), game.value, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
return(rankings)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.rankings(), fname, row.names=FALSE, sep=",")
}
predict.winner <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
value <- runif(1,0,1)
if(value <= predict(scoreA,scoreB)) teamA else teamB
}
predict.write <- function(teamA, teamB)
{
for(i in 1:5)
{
print(predict.winner(teamA,teamB))
}
}
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
fname <- file.choose()
print("Running rankings.  Please wait.")
} write.table(rankings, fname, row.names=FALSE, sep=",")
write.table(rankings, fname, row.names=FALSE, sep=",")
predict.write("USC", "Providence")
View(rankings)
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
View(schedule)
game.value <- function(s1,s2,c1=200,c2=50) {
top <- s1-s2
bot <- sqrt(c1 *sqrt((s1+s2)/c2))
return(pmin(pmax(.05,pnorm(top/bot)),.985))
}
predict <- function(eloA, eloB)
{
return (1/(1+10^((eloB-eloA)/400)))
}
log.likelihood <- function(x, oppElo, game.value, deviation)
{
return((dnorm(predict(x, oppElo), game.value, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
return(rankings)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.rankings(), fname, row.names=FALSE, sep=",")
}
predict.winner <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
value <- runif(1,0,1)
if(value <= predict(scoreA,scoreB)) teamA else teamB
}
predict.write <- function(teamA, teamB)
{
for(i in 1:5)
{
print(predict.winner(teamA,teamB))
}
}
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(rankings, fname, row.names=FALSE, sep=",")
predict.write("USC", "Providence")
View(schedule)
game.value <- function(s1,s2,c1=200,c2=50) {
top <- s1-s2
bot <- sqrt(c1 *sqrt((s1+s2)/c2))
return(pmin(pmax(.05,pnorm(top/bot)),.985))
}
predict <- function(eloA, eloB)
{
return (1/(1+10^((eloB-eloA)/400)))
}
log.likelihood <- function(x, oppElo, game.value, deviation)
{
return((dnorm(predict(x, oppElo), game.value, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
return(rankings)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.rankings(), fname, row.names=FALSE, sep=",")
}
predict.winner <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
value <- runif(1,0,1)
if(value <= predict(scoreA,scoreB)) teamA else teamB
}
predict.write <- function(teamA, teamB)
{
for(i in 1:5)
{
print(predict.winner(teamA,teamB))
}
}
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
leagues <- read.csv(file= 'data\\leagues.csv', sep=',', header=T)
schedule <- schedule[(schedule$Home.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team))
| (schedule$Visitor.Team %in% as.character(leagues[leagues$League == "NCAA" & leagues$Division == "I",]$Team)),]
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:11)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,6500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
fname <- file.choose()
print("Running rankings.  Please wait.")
schedule <- read.csv(file = 'data\\allscores.csv', sep=',', header=T)
predict.write("USC", "Providence")
predict.write("Butler", "Winthorp")
predict.write("Butler", "Winthrop")
predict.write("Minnesota", "Middle Tennesee")
predict.write("Minnesota", "MTSU")
predict.write("Wake Forest", "Cincinnati")
predict.write("Arkansas", "Seton Hall")
predict.write("North Carolina", "Texas Southern")
predict.write("North Carolina", "Arkansas")
predict.write("Minnesota", "Winthrop")
predict.write("Wake Forest", "UCLA")
predict.write("Wichita", "Kentucky")
predict.write("Wichita St", "Kentucky")
predict.write("UCLA", "Kentucky")
predict.write("UCLA", "Kentucky")
predict.write("Arkansas", "Minnesota")
predict.write("Kentucky", "Minnesota")
predict.write("Louisville", "Jacksonville St")
predict.write("Michigan", "Oklahoma St")
predict.write("Oregon", "Iona")
predict.write("Creighton", "Rhode Island")
predict.write("Purdue", "Vermont")
predict.write("Iowa St", "Nevada")
predict.write("Iowa St", "Purdue")
predict.write("Miami FL", "Michigan St")
predict.write("Kansas", "NC Central")
predict.write("Kansas", "Michigan St")
predict.write("Purdue", "Michigan St")
predict.write("Creighton", "Oregon")
predict.write("Oklahoma St", "Louisville")
predict.write("Creighton", "Louisville")
predict.write("Purdue", "Louisville")
predict.write("Purdue", "Kentucky")
predict.write("Wisconsin", "Virginia Tech")
predict.write("Virginia", "UNC Wilmington")
predict.write("Florida", "ETSU")
predict.write("SMU", "USC")
predict.write("Baylor", "New Mexico St")
predict.write("South Carolina", "Marquette")
predict.write("Duke", "Troy")
predict.write("Virginia", "Florida")
predict.write("Villanova", "Wisconsin")
predict.write("SMU", "Baylor")
predict.write("Marquette", "Duke")
predict.write("Villanova", "Florida")
predict.write("SMU", "Duke")
predict.write("Duke", "Florida")
predict.write("Gonzaga", "South Dakota St")
predict.write("Northwestern", "Vanderbilt")
predict.write("Notre Dame", "Princeton")
predict.write("West Virginia", "Bucknell")
predict.write("Maryland", "Xavier")
predict.write("Florida St", "FL Gulf Coast")
predict.write("St Mary's CA", "VCU")
predict.write("Arizona", "North Dakota")
predict.write("St Mary's CA", "Virginia Commonwealth")
predict.write("St Mary's CA", "VA Commonwealth")
predict.write("Gonzaga", "S Dakota St")
predict.write("Gonzaga", "Northwestern")
predict.write("Notre Dame", "West Virginia")
predict.write("Florida St", "Maryland")
predict.write("St Mary's CA", "Arizona")
predict.write("Gonzaga", "West Virginia")
predict.write("Florida St", "St Mary's CA")
predict.write("Gonzaga", "Florida St")
predict.write("Duke", "Florida St")
predict.write("Duke", "Kentucky")
predict.write("Duke", "Kentucky")
predict.write("Duke", "Kentucky")
predict(1779.127, 1902.801)
predict.winner <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
predict(scoreA,scoreB)
}
predict.winner("Providence", "USC")
predict.winner("Kansas", "USC")
predict.winner("Wisconsin", "Virginia Tech")
predict.winner("Virginia", "UNC Wilmington")
predict.winner("Florida", "ETSU")
predict.winner("Baylor", "New Mexico")
predict.winner("South Carolina", "Marquette")
predict.winner("Miami FL", "Michigan St")
predict.winner("Iowa St", "Nevada")
predict.winner("Creighton", "Rhode Island")
predict.winner("Oregon", "Iona")
predict.winner("Michigan", "Oklahoma St")
predict.winner("Louisville", "Jacksonville St")
predict.winner("Louisville", "Oklahoma St")
predict.winner("Oregon", "Creighton")
predict.winner("Purdue", "Iowa St")
predict.winner("Michigan St", "Kansas")
predict.winner <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
value <- runif(1,0,1)
if(value <= predict(scoreA,scoreB)) teamA else teamB
}
predict.score <- function(teamA, teamB)
{
scoreA <- rankings[rankings$Team == as.character(teamA),]$Score
scoreB <-  rankings[rankings$Team == as.character(teamB),]$Score
predict(scoreA,scoreB)
}
predict.write <- function(teamA, teamB)
{
print(predict.winner(teamA,teamB))
print(predict.score(teamA,teamB))
}
predict.write("Northwestern", "Vanderbilt")
predict.write("Notre Dame", "Princeton")
predict.write("West Virginia", "Bucknell")
predict.write("Maryland", "Xavier")
predict.write("Florida St", "FL Gulf Coast")
predict.write("St Mary's CA", "VA Commonwealth")
predict.write("Arizona", "North Dakota")
predict.write("Arizona", "St Mary's CA")
predict.write("FL Gulf Coast", "Xavier")
predict.write("St Mary's CA", "Xavier")
predict.write("Bucknell", "Notre Dame")
predict.write("Gonzaga", "Northwester")
predict.write("Gonzaga", "Northwestern")
predict.write("Gonzaga", "Notre Dame")
predict.write("St Marys CA", "Notre Dame")
predict.write("St Mary's CA", "Notre Dame")
predict.write("Kentucky", "Northern Kentucky")
predict.write("Dayton", "Wichita St")
predict.write("Kent", "UCLA")
predict.write("Cincinnati", "Wake Forest")
predict.write("Butler", "Wonthrop")
predict.write("Kentucky", "Northern Kentucky")
predict.write("MTSU", "Minnesota")
predict.write("Seton Hall", "Arkansas")
predict.write("North Carolina", "Texas Southern")
predict.write("North Carolina", "Seton Hall")
predict.write("MTSU", "Butler")
predict.write("North Carolina", "Butler")
predict.write("Cincinnati", "UCLA")
predict.write("Wichita St", "Kentucky")
predict.write("UCLA", "Kentucky")
predict.write("North Carolina", "Kentucky")
predict.write("Louisville", "Creighton")
predict.write("Michigan St", "Kansas")
predict.write("Iowa St", "Kansas")
predict.write("Iowa St", "Louisville")
predict.write("Villanova", "Wisconsin")
predict.write("Virginia", "Florida")
predict.write("SMU", "Baylor")
predict.write("Marquette", "Duke")
predict.write("Baylor", "Duke")
predict.write("Virginia", "Wisconsin")
predict.write("Duke", "Wisconsin")
predict.write("Notre Dame", "Wisconsin")
predict.write("Louisville", "Kentucky")
predict.write("Notre Dame", "Kentucky")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
predict.write("Kansas St", "Cincinnati")
