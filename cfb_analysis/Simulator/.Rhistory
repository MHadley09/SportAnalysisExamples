nrow(games[games$Home.Score>=56 && games$Away.Score<=7,])
nrow(games[games$Home.Score>=56,])
nrow(games[games$Away.Score<=56,])
nrow(games[games$Away.Score<=7,])
nrow(games[games$Home.Score>=56 && games$Away.Score<=7,])
nrow(games[games$Home.Score>=56 && games$Away.Score<=10,])
nrow(games[games$Home.Score>=56 && games$Away.Score<=100,])
nrow(games[(games$Home.Score>=56 & games$Away.Score<=7),])
nrow(peach[peach$Home.Score<=3 && peach$Away.Score>=56,])
nrow(peach[peach$Home.Score<=3 & peach$Away.Score>=56,])
nrow(peach[peach$Home.Score<=3 & peach$Away.Score>=58,])
nrow(peach[peach$Away.Score-peach$Home.Score>=55,])
nrow(peach[peach$Home.Score>=58 & peach$Away.Score<=3,])
nrow(peach[peach$Home.Score>=21 & peach$Away.Score<=1,])
nrow(peach[peach$Home.Score>=21 & peach$Away.Score<=0,])
nrow(peach$Away.Score<=0,])
nrow(peach[peach$Away.Score<=0,])
nrow(peach[peach$Away.Score<=1,])
nrow(peach[peach$Home.Score<=0 & peach$Away.Score>=21,])
nrow(peach[peach$Home.Score<=0,])
neutral.predict("Ohio State", "Alabama", 100000)
#This is the optimal version
page.rank <- function(H, b, alpha )
{
#conferences <-  read.csv(file = 'data\\divisionBreakdown.csv', sep=',', header=T)
n <- dim(H)[1]
S <- H
rs <- H %*% rep(1,n)
for (i in 1:n) {
if (rs[i] == 0)
{
S[i,] <- b
S[i,i] <- 3*(sum(b)-b[1])
S[i,] <- S[i,]/sum(S[i,])
}
else
{
S[i,] <- S[i,] / rs[i]
}
}
tm <- rep(1, n) %*% t(b)
G <-  (alpha * S) + (1-alpha)*tm
eig <- eigen(t(G))
pi <- Re(eig$vectors[,1])
return(pi)
}
schedule <- read.csv(file = 'data\\2016\\gamesPlayed.csv', sep=',', header=T)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
schedule$Visitor.Team <- trim(schedule$Visitor.Team)
schedule$Home.Team <- trim(schedule$Home.Team)
Team <- unique(c(schedule$Visitor.Team,schedule$Home.Team))
#divisions <- read.csv(file = 'data\\divisionBreakdown.csv', sep=',', header=T)
divisions <- data.frame(Team = Team, id=1:length(Team))
schedule$Home.Id <- 0
schedule$Visitor.Id <- 0
for(i in 1:length(divisions$id))
{
if(nrow(schedule[schedule$Home.Team == as.character(divisions[i,]$Team),]) > 0)
{
schedule[schedule$Home.Team == as.character(divisions[i,]$Team),]$Home.Id <- divisions[i,]$id
}
if(nrow(schedule[schedule$Visitor.Team == as.character(divisions[i,]$Team),]) > 0)
{
schedule[schedule$Visitor.Team == as.character(divisions[i,]$Team),]$Visitor.Id <-  divisions[i,]$id
}
}
schedule <- schedule[schedule$Home.Id %in% divisions$id,]
schedule <- schedule[schedule$Visitor.Id %in% divisions$id,]
victories.matrix <- matrix(0, length(divisions$id), length(divisions$id))
mov.matrix <-  matrix(0, length(divisions$id), length(divisions$id))
for(j in 1:length(schedule$Home.Id))
{
game <- schedule[j,]
if(game$Home.Score > game$Visitor.Score){
victories.matrix[game$Visitor.Id, game$Home.Id] <- 1 + victories.matrix[game$Visitor.Id, game$Home.Id]
mov.matrix[game$Visitor.Id, game$Home.Id] <- sqrt(game$Home.Score - game$Visitor.Score) + mov.matrix[game$Visitor.Id, game$Home.Id]
}
if(game$Home.Score < game$Visitor.Score){
victories.matrix[game$Home.Id, game$Visitor.Id] <- 1+  victories.matrix[game$Home.Id, game$Visitor.Id]
mov.matrix[game$Home.Id, game$Visitor.Id] <-  sqrt(game$Visitor.Score - game$Home.Score)  + mov.matrix[game$Home.Id, game$Visitor.Id]
}
}
losses.matrix <- t(victories.matrix)
mol.matrix <-  t(mov.matrix)
for(run in 1:100)
{
for(k in 1:dim(mov.matrix)[1])
{
losses <- sum(victories.matrix[k,])
lossMoV <- sum(mov.matrix[k,])
}
book <- rep(min(1, mean(mov.matrix))/(dim(mov.matrix)[1]),
dim(mov.matrix)[1])
t<- page.rank(mov.matrix, book, .85)
divisions$score <- abs(1000*t)
divisions$rank <- 1 + length(divisions$score) - rank(divisions$score)
for(k in 1:length(divisions$id))
{
lossScores <- divisions[victories.matrix[k,] >= 0,]$score * mov.matrix[victories.matrix[k,] >= 0, k]
mov.matrix[victories.matrix[k,] >= 0, k] <- lossScores
}
}
resultsWins <- divisions
for(run in 1:100)
{
for(k in 1:dim(mol.matrix)[1])
{
wins <- sum(losses.matrix[k,])
winMov <- sum(mol.matrix[k,])
mol.matrix[k,k] <- ifelse(wins==0, 0, 2*(winMov/wins))
}
book <- rep(min(1, mean(mol.matrix))/(dim(mol.matrix)[1]),
dim(mol.matrix)[1])
t<- page.rank(mol.matrix, book, .85)
divisions$score <- abs(1000*t)
divisions$rank <- 1 + length(divisions$score) - rank(divisions$score)
for(k in 1:length(divisions$id))
{
winScores <- divisions[losses.matrix[k,] >= 0,]$score * mol.matrix[losses.matrix[k,] >= 0, k]
mol.matrix[losses.matrix[k,] >= 0, k] <- winScores
}
}
resultsLosses <- divisions
Conferences <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
resultsWins <- resultsWins[resultsWins$Team %in% Conferences[Conferences$Conference != "FCS",]$TEAM,]
resultsLosses <- resultsLosses[resultsLosses$Team %in% Conferences[Conferences$Conference != "FCS",]$TEAM,]
results <- data.frame(Team=resultsWins$Team, Score=(resultsWins$score-(5*resultsLosses$score)))
results$Rank <- 1 + length(results$Score) - rank(results$Score)
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(results, fname, row.names=FALSE, sep=",")
game.value <- function(scoreA, scoreB)
{
x <- pmin(pmax(-21, scoreA - scoreB),21)
return (.5 - (.0000270209*x^3) + (0.0352489*x))
}
# game.value <- function(scoreA, scoreB)
# {
#   return ((scoreA^2.37)/((scoreA^2.37)+(scoreB^2.37)))
# }
predict <- function(eloA, eloB)
{
return (1/(1+10^((eloB-eloA)/400)))
}
log.likelihood <- function(x, oppElo, game.value, deviation)
{
return((dnorm(predict(x, oppElo), game.value, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\2016\\gamesPlayed.csv', sep=',', header=T)
#  divisions <-read.csv(file = 'data\\2005\\divisionBreakdown.csv', sep=',', header=T)
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(1600, length(teams))
score <- rep(1600, length(teams))
rm(schedule)
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:3)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(0,3500), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
rankings$Rank <- (1 + length(rankings$Score) - rank(rankings$Score))
return(rankings)
}
calculate.FBS.Rankings <- function()
{
rankings <- calculate.rankings()
divisions <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS <- data.frame(Team=divisions[divisions$Conference != "FCS",]$TEAM)
FBS <- merge(FBS, rankings, by="Team")
FBS$Rank <- (1 + length(FBS$Score) - rank(FBS$Score))
return(FBS)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.FBS.Rankings(), fname, row.names=FALSE, sep=",")
}
save.rankings()
game.value <- function(scoreA, scoreB)
{
x <- pmin(pmax(-21, scoreA - scoreB),21)
return (.5 - (.0000270209*x^3) + (0.0352489*x))
}
elo.ranking <-function()
{
box.scores <- read.csv(file = 'data\\2016\\gamesPlayed.csv', sep=',', header=T)
FBS.Records <- read.csv(file = 'data\\2016\\records.csv', sep=',', header=T)
Conferences <- read.csv(file = 'data\\2016\\conferenceWithFCS.csv', sep=',', header=T)
FBS.Record.List <- FBS.Records[FBS.Records$TEAM %in%
as.character(Conferences[,]$TEAM),]
TEAM <- FBS.Record.List$TEAM
startElo <- 1400
ELO <- rep(startElo,  length(FBS.Record.List$TEAM))
GAMES <- rep(0,  length(FBS.Record.List$TEAM))
RANK <-  rep(0, length(FBS.Record.List$TEAM))
rankings <- data.frame(TEAM, ELO, GAMES, RANK)
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "FCS",]$TEAM,]$ELO <- startElo/2
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "ACC",]$TEAM,]$ELO <- startElo+100
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "SEC",]$TEAM,]$ELO <- startElo+100
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "Big Ten",]$TEAM,]$ELO <- startElo+100
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "Big 12",]$TEAM,]$ELO <- startElo+100
rankings[rankings$TEAM %in% Conferences[Conferences$Conference == "Pac-12",]$TEAM,]$ELO <- startElo+100
box.scores <- box.scores[box.scores$Home.Team %in% as.character(FBS.Record.List$TEAM),]
box.scores <- box.scores[box.scores$Visitor.Team %in% as.character(FBS.Record.List$TEAM),]
for(i in 1:(length(box.scores$Home.Team)))
{
box <- box.scores[i,]
if(!(nrow(box) == 0))
{
home <- rankings[rankings$TEAM == as.character(box$Home.Team),]
if(nrow(home) != 1)
{
print(box$Home.Team)
print(box$Visitor.Team)
}
away <- rankings[rankings$TEAM == as.character(box$Visitor.Team),]
if(nrow(away) != 1)
{
print(box$Home.Team)
print(box$Visitor.Team)
}
Rh <- 10^(home$ELO/400)
Ra <- 10^(away$ELO/400)
Eh <- Rh/(Rh+Ra)
Ea <- Ra/(Rh+Ra)
Sh <- (1+game.value(box$Home.Score, box$Visitor.Score))/2
Sa <-  game.value(box$Visitor.Score, box$Home.Score)/2
if(box$Home.Score < box$Visitor.Score)
{
Sh <- (game.value(box$Home.Score, box$Visitor.Score))/2
Sa <-  (1+game.value(box$Visitor.Score, box$Home.Score))/2
}
else if(box$Home.Score == box$Visitor.Score)
{
Sh <- 0.5
Sa <- 0.5
}
home$ELO <- home$ELO + 2*((1600/(5+home$GAMES))*(Sh-Eh))
away$ELO <- away$ELO + 2*((1600/(5+away$GAMES))*(Sa-Ea))
home$GAMES <- home$GAMES + 1
away$GAMES <- away$GAMES + 1
rankings[rankings$TEAM == as.character(box$Home.Team),] <- home
rankings[rankings$TEAM == as.character(box$Visitor.Team),] <- away
}
}
second.pass.rankings <- rankings
second.pass.rankings$GAMES <- 0
for(i in (length(box.scores$Home.Team)):1)
{
box <- box.scores[i,]
if(!(nrow(box) == 0))
{
home <- second.pass.rankings[second.pass.rankings$TEAM == as.character(box$Home.Team),]
away <- second.pass.rankings[second.pass.rankings$TEAM == as.character(box$Visitor.Team),]
Rh <- 10^(home$ELO/400)
Ra <- 10^(away$ELO/400)
Eh <- Rh/(Rh+Ra)
Ea <- Ra/(Rh+Ra)
Sh <- (1+game.value(box$Home.Score, box$Visitor.Score))/2
Sa <-  game.value(box$Visitor.Score, box$Home.Score)/2
if(box$Home.Score < box$Visitor.Score)
{
Sh <- (game.value(box$Home.Score, box$Visitor.Score))/2
Sa <-  (1+game.value(box$Visitor.Score, box$Home.Score))/2
}
else if(box$Home.Score == box$Visitor.Score)
{
Sh <- 0.5
Sa <- 0.5
}
home$ELO <- home$ELO + 2*((1600/(5+home$GAMES))*(Sh-Eh))
away$ELO <- away$ELO + 2*((1600/(5+away$GAMES))*(Sa-Ea))
home$GAMES <- home$GAMES + 1
away$GAMES <- away$GAMES + 1
second.pass.rankings[second.pass.rankings$TEAM == as.character(box$Home.Team),] <- home
second.pass.rankings[second.pass.rankings$TEAM == as.character(box$Visitor.Team),] <- away
}
}
rankings <- rankings[rankings$TEAM %in% Conferences[Conferences$Conference != "FCS",]$TEAM,]
second.pass.rankings <- second.pass.rankings[second.pass.rankings$TEAM %in% Conferences[Conferences$Conference != "FCS",]$TEAM,]
rankings$RANK <- 1 + length(rankings$ELO) - rank(rankings$ELO)
second.pass.rankings$RANK <- 1 + length(second.pass.rankings$ELO) - rank(second.pass.rankings$ELO)
return(second.pass.rankings)
}
elos <- elo.ranking()
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(elos, fname, row.names=FALSE, sep=",")
elo.predict<-function(teamA, teamB)
{
eloA <- elos[elos$TEAM == teamA,]$ELO
eloB <- elos[elos$TEAM == teamB,]$ELO
return (1/(1+10^((eloB-eloA)/400)))
}
source('True_SoS_played.R')
source('py_record.R')
expected.wins <- All.SoS()
ranking <-  Py.Wins()
ranking <- merge(x= expected.wins, y=ranking, by.x = "Team", by.y = "TEAM")
ranking$Score<- ((2*(ranking$Py.Wins)) + (max(ranking$Expected.Wins) - ranking$Expected.Wins))/(ranking$Games)
Conferences <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS.Team <- Conferences[Conferences$Conference != "FCS",]
ranking <- ranking[ranking$Team %in% FBS.Team$TEAM ,]
ranking$Rank <- (1 + length(ranking$Score ) - rank(ranking$Score ))
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(ranking, fname, row.names=FALSE, sep=",")
game.value <- function(scoreA, scoreB)
{
x <- pmin(pmax(-45, ((scoreA^2 - scoreB^2)/(scoreA + scoreB))),45)
return(x)
}
predict <- function(eloA, eloB)
{
x <- pmin(pmax(-45, ((eloA^2 - eloB^2)/(eloA + eloB))),45)
return(x)
}
log.likelihood <- function(x, oppElo, game.value, deviation)
{
return((dnorm(predict(x, oppElo), game.value, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\2016\\gamesPlayed.csv', sep=',', header=T)
#  divisions <-read.csv(file = 'data\\2005\\divisionBreakdown.csv', sep=',', header=T)
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.score <- rep(21, length(teams))
score <- rep(21, length(teams))
rm(schedule)
rankings <- data.frame(Team=teams, Previous.Score = last.step.score, Score = score)
deviation <- sd(game.value(data$Score, data$Opp.Score))
rm(teams,last.step.score,score)
for(j in 1:3)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
gameScores <- game.value(scores, oppScores)
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Game.Value=gameScores),
data.frame(Opp=oppScore$Team, Opp.Value=oppScore$Previous.Score), by="Opp")
func <- function(x)
{
return(mean(log.likelihood(x, games$Opp.Value, games$Game.Value, deviation)))
}
rankings[i,]$Score <- optimize(f=func, interval=c(-80,80), maximum=T)$maximum
}
rankings$Previous.Score <- rankings$Score
}
rankings$Rank <- (1 + length(rankings$Score) - rank(rankings$Score))
return(rankings)
}
calculate.FBS.Rankings <- function()
{
rankings <- calculate.rankings()
divisions <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS <- data.frame(Team=divisions[divisions$Conference != "FCS",]$TEAM)
FBS <- merge(FBS, rankings, by="Team")
FBS$Rank <- (1 + length(FBS$Score) - rank(FBS$Score))
return(FBS)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.FBS.Rankings(), fname, row.names=FALSE, sep=",")
}
save.rankings()
predict.score <- function(offense, defense)
{
return(offense-defense)
}
log.likelihood.offense <- function(x, defense, score, deviation)
{
return((dnorm(predict.score(x, defense), score, deviation, log=T)))
}
log.likelihood.defense <- function(x, offense, score, deviation)
{
return((dnorm(predict.score(offense, x), score, deviation, log=T)))
}
calculate.rankings <- function()
{
schedule <- read.csv(file = 'data\\2016\\gamesPlayed.csv', sep=',', header=T)
#  divisions <-read.csv(file = 'data\\2005\\divisionBreakdown.csv', sep=',', header=T)
data <- data.frame(Team = schedule$Home.Team, Score = schedule$Home.Score,
Opp = schedule$Visitor.Team, Opp.Score = schedule$Visitor.Score)
data <- rbind(data, data.frame(Team = data$Opp, Score = data$Opp.Score,
Opp = data$Team, Opp.Score = data$Score))
teams <- unique(data$Team)
last.step.offense <- rep(28, length(teams))
offense <- rep(28, length(teams))
last.step.defense <- rep(0, length(teams))
defense <- rep(0, length(teams))
rm(schedule)
rankings <- data.frame(Team=teams, Last.Step.Offense = last.step.offense, Offense = offense,
Last.Step.Defense = last.step.defense, Defense = defense)
divisions <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS <- data.frame(Team=divisions[divisions$Conference != "FCS",]$TEAM)
FBS <- merge(FBS, rankings, by="Team")
rankings <- FBS
data <- data[data$Team %in% as.character(rankings$Team),]
data <- data[data$Opp %in% as.character(rankings$Team),]
deviation <- sd(c(data$Score, data$Opp.Score))
rm(teams,last.step.defense, last.step.offense)
for(j in 1:50)
{
for(i in 1:length(rankings$Team))
{
opps <- data[data$Team==as.character(rankings[i,]$Team),]$Opp
scores <- data[data$Team==as.character(rankings[i,]$Team),]$Score
oppScores <-  data[data$Team==as.character(rankings[i,]$Team),]$Opp.Score
oppScore <- rankings[rankings$Team %in% opps,]
games <- merge(data.frame(Opp=opps, Score=scores, Opp.Score = oppScores),
data.frame(Opp=oppScore$Team, Opp.Offense=oppScore$Last.Step.Offense,
Opp.Defense=oppScore$Last.Step.Defense), by="Opp")
func1 <- function(x)
{
return(mean(log.likelihood.offense(x, games$Opp.Defense, games$Score, deviation)))
}
rankings[i,]$Offense <- optimize(f=func1, interval=c(-100,100), maximum=T)$maximum
func2 <- function(x)
{
return(mean(log.likelihood.defense(x, games$Opp.Offense, games$Opp.Score, deviation)))
}
rankings[i,]$Defense <- optimize(f=func2, interval=c(-100,100), maximum=T)$maximum
}
rankings$Last.Step.Offense <- rankings$Offense
rankings$Last.Step.Defense <- rankings$Defense
}
divisions <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS <- data.frame(Team=divisions[divisions$Conference != "FCS",]$TEAM)
FBS <- merge(FBS, rankings, by="Team")
records <- read.csv(file = 'data\\2016\\records.csv', sep=',', header=T)
names(records)[names(records)=="TEAM"] <- "Team"
records$Win.Pct <- records$OVERALL.W / (records$OVERALL.W + records$OVERALL.L)
records$Record.Rank <- 1 + length(records$Win.Pct) - rank(records$Win.Pct)
source('Py_SoS_played.r')
SoS <- FBS.SoS()
names(SoS)[names(SoS)=="TEAM"] <- "Team"
FBS <- merge(FBS, SoS, by="Team")
FBS <- merge(FBS, records, by="Team")
FBS$Offense.Rank <- (1 + length(FBS$Offense) - rank(FBS$Offense))
FBS$Defense.Rank <- (1 + length(FBS$Defense) - rank(FBS$Defense))
FBS$Offense.Rank <- rank(FBS$Offense.Rank)
FBS$Defense.Rank <- rank(FBS$Defense.Rank)
FBS$Overall.Rank <- rank(((2*FBS$Offense.Rank)+(2*FBS$Defense.Rank)+FBS$Record.Rank+(.5*FBS$SoS.Ranking))/5.5)
return(FBS)
}
calculate.FBS.Rankings <- function()
{
rankings <- calculate.rankings()
rankings$Offense.Score <- rankings$Offense - min(rankings$Offense)
rankings$Defense.Score <- rankings$Defense - min(rankings$Defense)
rankings$SoS.Score <- 0.75 + ((rankings$SoS.Score - min(rankings$SoS.Score))/(4*max(rankings$SoS.Score)))
rankings$Overall.Score <-   rankings$SoS.Score*((rankings$Offense.Score+rankings$Defense.Score))/2
rankings$Overall.Rank <- rank(rankings$Overall.Rank)
rankings$Offense.Rank <- (1 + length(rankings$Offense.Score) - rank(rankings$Offense.Score))
rankings$Defense.Rank <- (1 + length(rankings$Defense.Score) - rank(rankings$Defense.Score))
rankings$Overall.Rank <- (1 + length(rankings$Overall.Score) - rank(rankings$Overall.Score))
rankings <- data.frame(Team=rankings$Team, Offense <- rankings$Offense.Score, Defense <- rankings$Defense.Score,
Overall.Score = rankings$Overall.Score, Overall = rankings$Overall.Rank)
return(rankings)
}
save.rankings <- function()
{
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.FBS.Rankings(), fname, row.names=FALSE, sep=",")
}
save.rankings()
source('True_SoS_played.R')
source('py_record.R')
expected.wins <- All.SoS()
ranking <-  Py.Wins()
ranking <- merge(x= expected.wins, y=ranking, by.x = "Team", by.y = "TEAM")
ranking$Wins.Over <- (ranking$Py.Wins) - ranking$Expected.Wins
Conferences <- read.csv(file = 'data\\2016\\ConferenceWithFCS.csv', sep=',', header=T)
FBS.Team <- Conferences[Conferences$Conference != "FCS",]
ranking <- ranking[ranking$Team %in% FBS.Team$TEAM ,]
ranking$Rank <- (1 + length(ranking$Wins.Over ) - rank(ranking$Wins.Over ))
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(ranking, fname, row.names=FALSE, sep=",")
